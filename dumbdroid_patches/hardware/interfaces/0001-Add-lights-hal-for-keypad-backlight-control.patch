From e35bdc687dd6de5abc3eb9c29027c48f70da24ef Mon Sep 17 00:00:00 2001
From: Michal Brzozowski <miki@extremic.com>
Date: Wed, 11 Jun 2025 09:42:44 +0200
Subject: [PATCH] Add lights hal for keypad backlight control

Change-Id: I241a181b4918b0703c14a0b69b67175f669848cf
---
 light/aidl/default/Android.bp        |  4 +-
 light/aidl/default/lights-default.rc | 12 ++++--
 light/aidl/default/lights.rs         | 60 ++++++++++++++++++++++++----
 3 files changed, 63 insertions(+), 13 deletions(-)

diff --git a/light/aidl/default/Android.bp b/light/aidl/default/Android.bp
index 285329e27d..97bcbd4562 100644
--- a/light/aidl/default/Android.bp
+++ b/light/aidl/default/Android.bp
@@ -11,8 +11,8 @@ rust_binary {
     name: "android.hardware.lights-service.example",
     relative_install_path: "hw",
     init_rc: ["lights-default.rc"],
-    vintf_fragments: ["lights-default.xml"],
-    vendor: true,
+ //   vintf_fragments: ["lights-default.xml"],
+ //   vendor: true,
     rustlibs: [
         "liblogger",
         "liblog_rust",
diff --git a/light/aidl/default/lights-default.rc b/light/aidl/default/lights-default.rc
index 687ec97dd1..10c731107d 100644
--- a/light/aidl/default/lights-default.rc
+++ b/light/aidl/default/lights-default.rc
@@ -1,5 +1,9 @@
-service vendor.light-default /vendor/bin/hw/android.hardware.lights-service.example
+service vendor.light-default /system/bin/hw/android.hardware.lights-service.example
     class hal
-    user nobody
-    group nobody
-    shutdown critical
+    interface aidl/android.hardware.light.ILights/default
+    user system
+    group system
+
+on init
+    chmod 0666 /sys/class/leds/mt6370_pmu_led1/brightness
+    chmod 0666 /sys/class/leds/lcd-backlight/brightness
diff --git a/light/aidl/default/lights.rs b/light/aidl/default/lights.rs
index 6c8aa3fc27..8fbc7dbfb8 100644
--- a/light/aidl/default/lights.rs
+++ b/light/aidl/default/lights.rs
@@ -31,8 +31,6 @@ struct Light {
     state: HwLightState,
 }
 
-const NUM_DEFAULT_LIGHTS: i32 = 3;
-
 /// Defined so we can implement the ILights AIDL interface.
 pub struct LightsService {
     lights: Mutex<HashMap<i32, Light>>,
@@ -52,12 +50,55 @@ impl LightsService {
     }
 }
 
+use std::fs;
+use std::io::Write;
+
+const KEYPAD_BACKLIGHT_PATH: &str = "/sys/class/leds/mt6370_pmu_led1/brightness";
+const SCREEN_BACKLIGHT_PATH: &str = "/sys/class/leds/lcd-backlight/brightness";
+
+fn compute_brightness(color: i32) -> u8 {
+    // Extract 8-bit red, green, blue components
+    let red   = ((color >> 16) & 0x00FF) as u32;
+    let green = ((color >> 8)  & 0x00FF) as u32;
+    let blue  =  (color        & 0x00FF) as u32;
+
+    // Apply weighted sum and shift down by 8 bits
+    let sum = 77u32.wrapping_mul(red)
+            + 150u32.wrapping_mul(green)
+            + 29u32.wrapping_mul(blue);
+
+    // Right-shift by 8 (divide by 256)
+    let brightness = sum >> 8;
+
+    // Truncate to u8
+    brightness as u8
+}
+
+fn write_backlight(value: u8) {
+    if let Ok(mut file) = fs::OpenOptions::new().write(true).open(KEYPAD_BACKLIGHT_PATH) {
+        if value > 0 {
+          let _ = write!(file, "{}", 6);
+        } else {
+          let _ = write!(file, "{}", 0);
+        }
+    } else {
+        log::warn!("Failed to open keypad backlight path");
+    }
+    if let Ok(mut file) = fs::OpenOptions::new().write(true).open(SCREEN_BACKLIGHT_PATH) {
+        let _ = write!(file, "{}", value);
+    } else {
+        log::warn!("Failed to open screen backlight path");
+    }
+}
+
 impl Default for LightsService {
     fn default() -> Self {
-        let id_mapping_closure =
-            |light_id| HwLight { id: light_id, ordinal: light_id, r#type: LightType::BACKLIGHT };
-
-        Self::new((1..=NUM_DEFAULT_LIGHTS).map(id_mapping_closure))
+        let lights = vec![
+            HwLight { id: 1, ordinal: 1, r#type: LightType::BACKLIGHT },
+            HwLight { id: 2, ordinal: 2, r#type: LightType::KEYBOARD },
+            HwLight { id: 3, ordinal: 3, r#type: LightType::NOTIFICATIONS },
+        ];
+        Self::new(lights)
     }
 }
 
@@ -67,12 +108,17 @@ impl ILights for LightsService {
 
         if let Some(light) = self.lights.lock().unwrap().get_mut(&id) {
             light.state = *state;
+
+            if light.hw_light.r#type == LightType::BACKLIGHT {
+                let brightness = compute_brightness(state.color);
+                write_backlight(brightness);
+            }
+
             Ok(())
         } else {
             Err(Status::new_exception(ExceptionCode::UNSUPPORTED_OPERATION, None))
         }
     }
-
     fn getLights(&self) -> binder::Result<Vec<HwLight>> {
         info!("Lights reporting supported lights");
         Ok(self.lights.lock().unwrap().values().map(|light| light.hw_light).collect())
-- 
2.34.1

